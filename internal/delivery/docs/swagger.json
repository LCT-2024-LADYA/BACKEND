{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/api/auth/login/admin": {
            "post": {
                "description": "Authorize admin with X-API-KEY",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Admin Authorization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin apikey",
                        "name": "X-API-KEY",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return tokens",
                        "schema": {
                            "$ref": "#/definitions/responses.TokenResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid X-API-KEY",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/auth/login/trainer": {
            "post": {
                "description": "Authorize trainer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Trainer Authorization",
                "parameters": [
                    {
                        "description": "Authorization request body",
                        "name": "auth",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Auth"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return tokens",
                        "schema": {
                            "$ref": "#/definitions/responses.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad body provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/auth/login/user": {
            "post": {
                "description": "Authorize user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "User Authorization",
                "parameters": [
                    {
                        "description": "Authorization request body",
                        "name": "auth",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Auth"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return tokens",
                        "schema": {
                            "$ref": "#/definitions/responses.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad body provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/auth/refresh": {
            "get": {
                "description": "Refreshes the access and refresh tokens using the provided refresh token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Refresh Tokens",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Refresh token",
                        "name": "refresh_token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return tokens",
                        "schema": {
                            "$ref": "#/definitions/responses.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad query provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/auth/register/trainer": {
            "post": {
                "description": "Register trainer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Trainer Register",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token",
                        "name": "access_token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Register request body",
                        "name": "auth",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TrainerCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Return created trainer's id",
                        "schema": {
                            "$ref": "#/definitions/responses.CreatedIDResponse"
                        }
                    },
                    "400": {
                        "description": "Bad body or JWT provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "JWT is expired or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/auth/register/user": {
            "post": {
                "description": "Register user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "User Register",
                "parameters": [
                    {
                        "description": "Register request body",
                        "name": "auth",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Return tokens",
                        "schema": {
                            "$ref": "#/definitions/responses.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad body provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/role": {
            "get": {
                "description": "Get roles",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Get Roles",
                "responses": {
                    "200": {
                        "description": "Return roles",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Base"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid body or jwt provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "JWT is expired or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "description": "Create a new role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Create Role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token",
                        "name": "access_token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Role data to create",
                        "name": "role",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BaseBase"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Role successfully created",
                        "schema": {
                            "$ref": "#/definitions/responses.CreatedIDResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid body or jwt provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "JWT is expired or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "delete": {
                "description": "Delete roles by provided IDs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Delete Roles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token",
                        "name": "access_token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Role IDs to delete",
                        "name": "role_ids",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Roles successfully deleted"
                    },
                    "400": {
                        "description": "Invalid body or jwt provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "JWT is expired or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/specialization": {
            "get": {
                "description": "Get specializations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Specializations"
                ],
                "summary": "Get Specializations",
                "responses": {
                    "200": {
                        "description": "Return specializations",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Base"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid body or jwt provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "JWT is expired or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "description": "Create a new specialization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Specializations"
                ],
                "summary": "Create Specialization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token",
                        "name": "access_token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Specializations data to create",
                        "name": "specialization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BaseBase"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Specializations successfully created",
                        "schema": {
                            "$ref": "#/definitions/responses.CreatedIDResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid body or jwt provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "JWT is expired or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "delete": {
                "description": "Delete specializations by provided IDs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Specializations"
                ],
                "summary": "Delete Specializations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token",
                        "name": "access_token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Specialization IDs to delete",
                        "name": "specialization_ids",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Specializations successfully deleted"
                    },
                    "400": {
                        "description": "Invalid body or jwt provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "JWT is expired or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/trainer/achievement": {
            "post": {
                "description": "Create a new achievement for the trainer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trainers"
                ],
                "summary": "Create Trainer's Achievement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token",
                        "name": "access_token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Achievement data to create",
                        "name": "achievement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AchievementCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Achievement successfully created",
                        "schema": {
                            "$ref": "#/definitions/responses.CreatedIDResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid body or jwt provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "JWT is expired or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/trainer/achievement/{achievement_id}": {
            "delete": {
                "description": "Delete an existing achievement for the trainer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trainers"
                ],
                "summary": "Delete Trainer's Achievement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token",
                        "name": "access_token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Achievement ID",
                        "name": "achievement_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Achievement successfully deleted"
                    },
                    "400": {
                        "description": "Invalid body or jwt provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "JWT is expired or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/trainer/achievement/{achievement_id}/status": {
            "put": {
                "description": "Update the status of an existing achievement for the trainer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trainers"
                ],
                "summary": "Update Trainer's Achievement Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token",
                        "name": "access_token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Achievement ID",
                        "name": "achievement_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Achievement status to update",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AchievementStatusUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Achievement status successfully updated"
                    },
                    "400": {
                        "description": "Invalid body or jwt provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "JWT is expired or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/trainer/main": {
            "put": {
                "description": "Update trainer's main info by provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trainers"
                ],
                "summary": "Update Trainer's Main Info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token",
                        "name": "access_token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Trainer data to set",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TrainerUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trainer successfully updated"
                    },
                    "400": {
                        "description": "Invalid body or jwt provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "JWT is expired or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/trainer/me": {
            "get": {
                "description": "Get me",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trainers"
                ],
                "summary": "Get Me",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token",
                        "name": "access_token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return trainer",
                        "schema": {
                            "$ref": "#/definitions/dto.Trainer"
                        }
                    },
                    "400": {
                        "description": "Bad body or JWT provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "JWT is expired or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/trainer/photo": {
            "put": {
                "description": "Update trainer's photo",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trainers"
                ],
                "summary": "Update Trainer's Photo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token",
                        "name": "access_token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "New user photo with type jpeg/jpg/png/svg under 2MB",
                        "name": "photo",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trainer successfully updated"
                    },
                    "400": {
                        "description": "Invalid photo or jwt provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "JWT is expired or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/trainer/roles": {
            "put": {
                "description": "Update trainer's roles by provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trainers"
                ],
                "summary": "Update Trainer's Roles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token",
                        "name": "access_token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Role IDs to set",
                        "name": "roles",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Roles successfully updated"
                    },
                    "400": {
                        "description": "Invalid body or jwt provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "JWT is expired or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/trainer/service": {
            "put": {
                "description": "Update an existing service for the trainer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trainers"
                ],
                "summary": "Update Trainer's Service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token",
                        "name": "access_token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Service data to update",
                        "name": "service",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ServiceUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service successfully updated"
                    },
                    "400": {
                        "description": "Invalid body or jwt provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "JWT is expired or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "description": "Create a new service for the trainer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trainers"
                ],
                "summary": "Create Trainer's Service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token",
                        "name": "access_token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Service data to create",
                        "name": "service",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ServiceCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Service successfully created",
                        "schema": {
                            "$ref": "#/definitions/responses.CreatedIDResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid body or jwt provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "JWT is expired or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/trainer/service/{service_id}": {
            "delete": {
                "description": "Delete an existing service for the trainer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trainers"
                ],
                "summary": "Delete Trainer's Service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token",
                        "name": "access_token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Service ID",
                        "name": "service_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service successfully deleted"
                    },
                    "400": {
                        "description": "Invalid body or jwt provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "JWT is expired or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/trainer/specializations": {
            "put": {
                "description": "Update trainer's specializations by provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trainers"
                ],
                "summary": "Update Trainer's Specializations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token",
                        "name": "access_token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Specialization IDs to set",
                        "name": "specializations",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Specializations successfully updated"
                    },
                    "400": {
                        "description": "Invalid body or jwt provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "JWT is expired or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/trainer/{trainer_id}": {
            "get": {
                "description": "Returned data for profile",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trainers"
                ],
                "summary": "Get Profile",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "trainer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return user",
                        "schema": {
                            "$ref": "#/definitions/dto.User"
                        }
                    },
                    "400": {
                        "description": "Bad body or JWT provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "JWT is expired or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/user/main": {
            "put": {
                "description": "Update user's main info by provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update User's Main Info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token",
                        "name": "access_token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User data to set",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully updated"
                    },
                    "400": {
                        "description": "Invalid body or jwt provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "JWT is expired or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/user/me": {
            "get": {
                "description": "Get me",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get Me",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token",
                        "name": "access_token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return user",
                        "schema": {
                            "$ref": "#/definitions/dto.User"
                        }
                    },
                    "400": {
                        "description": "Bad body or JWT provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "JWT is expired or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/user/photo": {
            "put": {
                "description": "Update user's photo",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update User's Photo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token",
                        "name": "access_token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "New user photo with type jpeg/jpg/png/svg under 2MB",
                        "name": "photo",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully updated"
                    },
                    "400": {
                        "description": "Invalid photo or jwt provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "JWT is expired or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/user/{user_id}": {
            "get": {
                "description": "Returned data for profile",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get Profile",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return user",
                        "schema": {
                            "$ref": "#/definitions/dto.User"
                        }
                    },
                    "400": {
                        "description": "Bad body provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AchievementCreate": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 150,
                    "minLength": 2
                }
            }
        },
        "dto.AchievementStatusUpdate": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "boolean"
                }
            }
        },
        "dto.Auth": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8
                }
            }
        },
        "dto.Base": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.BaseBase": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.BasePrice": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                }
            }
        },
        "dto.BaseStatus": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "is_confirmed": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.ServiceCreate": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 150,
                    "minLength": 2
                },
                "price": {
                    "type": "integer",
                    "maximum": 1000000,
                    "minimum": 0
                }
            }
        },
        "dto.ServiceUpdate": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "minimum": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 150,
                    "minLength": 2
                },
                "price": {
                    "type": "integer",
                    "maximum": 1000000,
                    "minimum": 0
                }
            }
        },
        "dto.Trainer": {
            "type": "object",
            "required": [
                "age",
                "experience",
                "first_name",
                "last_name",
                "sex"
            ],
            "properties": {
                "achievements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.BaseStatus"
                    }
                },
                "age": {
                    "type": "integer",
                    "maximum": 150,
                    "minimum": 18
                },
                "email": {
                    "type": "string"
                },
                "experience": {
                    "type": "integer",
                    "maximum": 50,
                    "minimum": 0
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "photo_url": {
                    "type": "string"
                },
                "quote": {
                    "type": "string",
                    "maxLength": 100
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Base"
                    }
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.BasePrice"
                    }
                },
                "sex": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "specializations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Base"
                    }
                }
            }
        },
        "dto.TrainerCreate": {
            "type": "object",
            "required": [
                "age",
                "email",
                "experience",
                "first_name",
                "last_name",
                "password",
                "sex"
            ],
            "properties": {
                "age": {
                    "type": "integer",
                    "maximum": 150,
                    "minimum": 18
                },
                "email": {
                    "type": "string"
                },
                "experience": {
                    "type": "integer",
                    "maximum": 50,
                    "minimum": 0
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8
                },
                "quote": {
                    "type": "string",
                    "maxLength": 100
                },
                "sex": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                }
            }
        },
        "dto.TrainerUpdate": {
            "type": "object",
            "required": [
                "age",
                "email",
                "experience",
                "first_name",
                "last_name",
                "sex"
            ],
            "properties": {
                "age": {
                    "type": "integer",
                    "maximum": 150,
                    "minimum": 18
                },
                "email": {
                    "type": "string"
                },
                "experience": {
                    "type": "integer",
                    "maximum": 50,
                    "minimum": 0
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "quote": {
                    "type": "string",
                    "maxLength": 100
                },
                "sex": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                }
            }
        },
        "dto.User": {
            "type": "object",
            "required": [
                "age",
                "first_name",
                "last_name",
                "sex"
            ],
            "properties": {
                "age": {
                    "type": "integer",
                    "maximum": 150,
                    "minimum": 14
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "photo_url": {
                    "type": "string"
                },
                "sex": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                }
            }
        },
        "dto.UserCreate": {
            "type": "object",
            "required": [
                "age",
                "email",
                "first_name",
                "last_name",
                "password",
                "sex"
            ],
            "properties": {
                "age": {
                    "type": "integer",
                    "maximum": 150,
                    "minimum": 14
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8
                },
                "sex": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                }
            }
        },
        "dto.UserUpdate": {
            "type": "object",
            "required": [
                "age",
                "email",
                "first_name",
                "last_name",
                "sex"
            ],
            "properties": {
                "age": {
                    "type": "integer",
                    "maximum": 150,
                    "minimum": 14
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "sex": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                }
            }
        },
        "responses.CreatedIDResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "responses.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "responses.TokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        }
    }
}