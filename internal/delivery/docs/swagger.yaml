definitions:
  dto.AchievementCreate:
    properties:
      name:
        maxLength: 150
        minLength: 2
        type: string
    required:
    - name
    type: object
  dto.AchievementStatusUpdate:
    properties:
      status:
        type: boolean
    type: object
  dto.Auth:
    properties:
      email:
        type: string
      password:
        maxLength: 64
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.Base:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  dto.BaseBase:
    properties:
      name:
        type: string
    type: object
  dto.BasePrice:
    properties:
      id:
        type: integer
      name:
        type: string
      price:
        type: integer
    type: object
  dto.BaseStatus:
    properties:
      id:
        type: integer
      is_confirmed:
        type: boolean
      name:
        type: string
    type: object
  dto.Chat:
    properties:
      first_name:
        type: string
      id:
        type: integer
      last_message:
        type: string
      last_name:
        type: string
      photo_url:
        type: string
      time_last_message:
        type: string
    type: object
  dto.Exercise:
    properties:
      additionalMuscle:
        type: string
      difficulty:
        type: string
      equipment:
        type: string
      id:
        type: integer
      muscle:
        type: string
      name:
        type: string
      photos:
        items:
          type: string
        type: array
      reps:
        type: integer
      sets:
        type: integer
      status:
        type: boolean
      step:
        type: integer
      type:
        type: string
      weight:
        type: integer
    type: object
  dto.ExerciseBase:
    properties:
      additionalMuscle:
        type: string
      difficulty:
        type: string
      equipment:
        type: string
      id:
        type: integer
      muscle:
        type: string
      name:
        type: string
      photos:
        items:
          type: string
        type: array
      type:
        type: string
    type: object
  dto.ExerciseBaseStep:
    properties:
      additionalMuscle:
        type: string
      difficulty:
        type: string
      equipment:
        type: string
      id:
        type: integer
      muscle:
        type: string
      name:
        type: string
      photos:
        items:
          type: string
        type: array
      step:
        type: integer
      type:
        type: string
    type: object
  dto.ExerciseCreateBase:
    properties:
      additionalMuscle:
        type: string
      difficulty:
        type: string
      equipment:
        type: string
      muscle:
        type: string
      name:
        type: string
      photos:
        items:
          type: string
        type: array
      type:
        type: string
    type: object
  dto.ExerciseDetail:
    properties:
      id:
        type: integer
      reps:
        type: integer
      sets:
        type: integer
      weight:
        type: integer
    type: object
  dto.ExercisePagination:
    properties:
      cursor:
        type: integer
      objects:
        items:
          $ref: '#/definitions/dto.ExerciseBase'
        type: array
    type: object
  dto.ExerciseStatusUpdate:
    properties:
      status:
        type: boolean
    type: object
  dto.ExerciseStep:
    properties:
      id:
        type: integer
      step:
        type: integer
    type: object
  dto.Message:
    properties:
      id:
        type: integer
      is_to_user:
        type: boolean
      message:
        type: string
      service_id:
        type: integer
      time:
        type: string
      trainer_id:
        type: integer
      user_id:
        type: integer
    type: object
  dto.MessagePagination:
    properties:
      cursor:
        type: integer
      objects:
        items:
          $ref: '#/definitions/dto.Message'
        type: array
    type: object
  dto.Schedule:
    properties:
      date:
        type: string
      user_training_ids:
        items:
          type: integer
        type: array
    type: object
  dto.ScheduleTraining:
    properties:
      date:
        type: string
      exercises:
        items:
          $ref: '#/definitions/dto.ExerciseDetail'
        type: array
      id:
        type: integer
      time_end:
        type: string
      time_start:
        type: string
    type: object
  dto.ServiceCreate:
    properties:
      name:
        maxLength: 150
        minLength: 2
        type: string
      price:
        maximum: 1000000
        minimum: 0
        type: integer
    required:
    - name
    type: object
  dto.ServiceUpdate:
    properties:
      id:
        minimum: 1
        type: integer
      name:
        maxLength: 150
        minLength: 2
        type: string
      price:
        maximum: 1000000
        minimum: 0
        type: integer
    required:
    - id
    - name
    type: object
  dto.Trainer:
    properties:
      achievements:
        items:
          $ref: '#/definitions/dto.BaseStatus'
        type: array
      age:
        maximum: 150
        minimum: 18
        type: integer
      email:
        type: string
      experience:
        maximum: 50
        minimum: 0
        type: integer
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      id:
        type: integer
      last_name:
        maxLength: 50
        minLength: 2
        type: string
      photo_url:
        type: string
      quote:
        maxLength: 100
        type: string
      roles:
        items:
          $ref: '#/definitions/dto.Base'
        type: array
      services:
        items:
          $ref: '#/definitions/dto.BasePrice'
        type: array
      sex:
        enum:
        - 1
        - 2
        type: integer
      specializations:
        items:
          $ref: '#/definitions/dto.Base'
        type: array
    required:
    - age
    - experience
    - first_name
    - last_name
    - sex
    type: object
  dto.TrainerCover:
    properties:
      age:
        maximum: 150
        minimum: 18
        type: integer
      experience:
        maximum: 50
        minimum: 0
        type: integer
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      id:
        type: integer
      last_name:
        maxLength: 50
        minLength: 2
        type: string
      photo_url:
        type: string
      quote:
        maxLength: 100
        type: string
      roles:
        items:
          $ref: '#/definitions/dto.Base'
        type: array
      sex:
        enum:
        - 1
        - 2
        type: integer
      specializations:
        items:
          $ref: '#/definitions/dto.Base'
        type: array
    required:
    - age
    - experience
    - first_name
    - last_name
    - sex
    type: object
  dto.TrainerCoverPagination:
    properties:
      cursor:
        type: integer
      objects:
        items:
          $ref: '#/definitions/dto.TrainerCover'
        type: array
    type: object
  dto.TrainerCreate:
    properties:
      age:
        maximum: 150
        minimum: 18
        type: integer
      email:
        type: string
      experience:
        maximum: 50
        minimum: 0
        type: integer
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      last_name:
        maxLength: 50
        minLength: 2
        type: string
      password:
        maxLength: 64
        minLength: 8
        type: string
      quote:
        maxLength: 100
        type: string
      sex:
        enum:
        - 1
        - 2
        type: integer
    required:
    - age
    - email
    - experience
    - first_name
    - last_name
    - password
    - sex
    type: object
  dto.TrainerUpdate:
    properties:
      age:
        maximum: 150
        minimum: 18
        type: integer
      email:
        type: string
      experience:
        maximum: 50
        minimum: 0
        type: integer
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      last_name:
        maxLength: 50
        minLength: 2
        type: string
      quote:
        maxLength: 100
        type: string
      sex:
        enum:
        - 1
        - 2
        type: integer
    required:
    - age
    - email
    - experience
    - first_name
    - last_name
    - sex
    type: object
  dto.Training:
    properties:
      description:
        type: string
      exercises:
        items:
          $ref: '#/definitions/dto.ExerciseBaseStep'
        type: array
      id:
        type: integer
      name:
        type: string
    type: object
  dto.TrainingCover:
    properties:
      description:
        type: string
      exercises:
        type: integer
      id:
        type: integer
      name:
        type: string
    type: object
  dto.TrainingCoverPagination:
    properties:
      cursor:
        type: integer
      objects:
        items:
          $ref: '#/definitions/dto.TrainingCover'
        type: array
    type: object
  dto.TrainingCreate:
    properties:
      description:
        type: string
      exercises:
        items:
          $ref: '#/definitions/dto.ExerciseStep'
        type: array
      name:
        type: string
    type: object
  dto.TrainingCreateBase:
    properties:
      description:
        type: string
      exercises:
        items:
          $ref: '#/definitions/dto.ExerciseStep'
        type: array
      name:
        type: string
    type: object
  dto.User:
    properties:
      age:
        maximum: 150
        minimum: 14
        type: integer
      email:
        type: string
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      id:
        type: integer
      last_name:
        maxLength: 50
        minLength: 2
        type: string
      photo_url:
        type: string
      sex:
        enum:
        - 1
        - 2
        type: integer
    required:
    - age
    - first_name
    - last_name
    - sex
    type: object
  dto.UserCover:
    properties:
      age:
        maximum: 150
        minimum: 14
        type: integer
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      id:
        type: integer
      last_name:
        maxLength: 50
        minLength: 2
        type: string
      photo_url:
        type: string
      sex:
        enum:
        - 1
        - 2
        type: integer
    required:
    - age
    - first_name
    - last_name
    - sex
    type: object
  dto.UserCoverPagination:
    properties:
      cursor:
        type: integer
      objects:
        items:
          $ref: '#/definitions/dto.UserCover'
        type: array
    type: object
  dto.UserCreate:
    properties:
      age:
        maximum: 150
        minimum: 14
        type: integer
      email:
        type: string
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      last_name:
        maxLength: 50
        minLength: 2
        type: string
      password:
        maxLength: 64
        minLength: 8
        type: string
      sex:
        enum:
        - 1
        - 2
        type: integer
    required:
    - age
    - email
    - first_name
    - last_name
    - password
    - sex
    type: object
  dto.UserTraining:
    properties:
      date:
        type: string
      description:
        type: string
      exercises:
        items:
          $ref: '#/definitions/dto.Exercise'
        type: array
      id:
        type: integer
      name:
        type: string
      time_end:
        type: string
      time_start:
        type: string
    type: object
  dto.UserUpdate:
    properties:
      age:
        maximum: 150
        minimum: 14
        type: integer
      email:
        type: string
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      last_name:
        maxLength: 50
        minLength: 2
        type: string
      sex:
        enum:
        - 1
        - 2
        type: integer
    required:
    - age
    - email
    - first_name
    - last_name
    - sex
    type: object
  responses.CreatedIDResponse:
    properties:
      id:
        type: integer
    type: object
  responses.CreatedIDsResponse:
    properties:
      ids:
        items:
          type: integer
        type: array
    type: object
  responses.MessageResponse:
    properties:
      message:
        type: string
    type: object
  responses.TokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/auth/login/admin:
    post:
      consumes:
      - application/json
      description: Authorize admin with X-API-KEY
      parameters:
      - description: Admin apikey
        in: header
        name: X-API-KEY
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Return tokens
          schema:
            $ref: '#/definitions/responses.TokenResponse'
        "401":
          description: Invalid X-API-KEY
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal Server Error
      summary: Admin Authorization
      tags:
      - Authorization
  /api/auth/login/trainer:
    post:
      consumes:
      - application/json
      description: Authorize trainer
      parameters:
      - description: Authorization request body
        in: body
        name: auth
        required: true
        schema:
          $ref: '#/definitions/dto.Auth'
      produces:
      - application/json
      responses:
        "200":
          description: Return tokens
          schema:
            $ref: '#/definitions/responses.TokenResponse'
        "400":
          description: Bad body provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal Server Error
      summary: Trainer Authorization
      tags:
      - Authorization
  /api/auth/login/user:
    post:
      consumes:
      - application/json
      description: Authorize user
      parameters:
      - description: Authorization request body
        in: body
        name: auth
        required: true
        schema:
          $ref: '#/definitions/dto.Auth'
      produces:
      - application/json
      responses:
        "200":
          description: Return tokens
          schema:
            $ref: '#/definitions/responses.TokenResponse'
        "400":
          description: Bad body provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal Server Error
      summary: User Authorization
      tags:
      - Authorization
  /api/auth/refresh:
    get:
      consumes:
      - application/json
      description: Refreshes the access and refresh tokens using the provided refresh
        token.
      parameters:
      - description: Refresh token
        in: query
        name: refresh_token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Return tokens
          schema:
            $ref: '#/definitions/responses.TokenResponse'
        "400":
          description: Bad query provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal Server Error
      summary: Refresh Tokens
      tags:
      - Authorization
  /api/auth/register/trainer:
    post:
      consumes:
      - application/json
      description: Register trainer
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Register request body
        in: body
        name: auth
        required: true
        schema:
          $ref: '#/definitions/dto.TrainerCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Return created trainer's id
          schema:
            $ref: '#/definitions/responses.CreatedIDResponse'
        "400":
          description: Bad body or JWT provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal Server Error
      summary: Trainer Register
      tags:
      - Authorization
  /api/auth/register/user:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: Register request body
        in: body
        name: auth
        required: true
        schema:
          $ref: '#/definitions/dto.UserCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Return tokens
          schema:
            $ref: '#/definitions/responses.TokenResponse'
        "400":
          description: Bad body provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal Server Error
      summary: User Register
      tags:
      - Authorization
  /api/chat/trainer:
    get:
      consumes:
      - application/json
      description: Get all chats for a trainer
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of chats
          schema:
            items:
              $ref: '#/definitions/dto.Chat'
            type: array
        "400":
          description: Bad JWT provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Get Trainer Chats
      tags:
      - Chats
  /api/chat/trainer/{user_id}:
    get:
      consumes:
      - application/json
      description: Get messages for a chat between a user and a trainer - trainer
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Cursor for pagination
        in: query
        name: cursor
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of messages with pagination
          schema:
            $ref: '#/definitions/dto.MessagePagination'
        "400":
          description: Bad path or JWT provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Get Chat Messages Trainer
      tags:
      - Chats
  /api/chat/user:
    get:
      consumes:
      - application/json
      description: Get all chats for a user
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of chats
          schema:
            items:
              $ref: '#/definitions/dto.Chat'
            type: array
        "400":
          description: Bad JWT provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Get User Chats
      tags:
      - Chats
  /api/chat/user/{trainer_id}:
    get:
      consumes:
      - application/json
      description: Get messages for a chat between a user and a trainer - user
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Trainer ID
        in: path
        name: trainer_id
        required: true
        type: integer
      - description: Cursor for pagination
        in: query
        name: cursor
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of messages with pagination
          schema:
            $ref: '#/definitions/dto.MessagePagination'
        "400":
          description: Bad path or JWT provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Get Chat Messages User
      tags:
      - Chats
  /api/role:
    delete:
      consumes:
      - application/json
      description: Delete roles by provided IDs
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Role IDs to delete
        in: body
        name: role_ids
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Roles successfully deleted
        "400":
          description: Invalid body or jwt provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Delete Roles
      tags:
      - Roles
    get:
      consumes:
      - application/json
      description: Get roles
      produces:
      - application/json
      responses:
        "200":
          description: Return roles
          schema:
            items:
              $ref: '#/definitions/dto.Base'
            type: array
        "400":
          description: Invalid body or jwt provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Get Roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Create a new role
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Role data to create
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/dto.BaseBase'
      produces:
      - application/json
      responses:
        "201":
          description: Role successfully created
          schema:
            $ref: '#/definitions/responses.CreatedIDResponse'
        "400":
          description: Invalid body or jwt provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Create Role
      tags:
      - Roles
  /api/service/{id}:
    get:
      consumes:
      - application/json
      description: Get a service by its ID
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Service details
          schema:
            $ref: '#/definitions/dto.BasePrice'
        "400":
          description: Invalid service ID
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "404":
          description: Service not found
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Get Service by ID
      tags:
      - Services
  /api/specialization:
    delete:
      consumes:
      - application/json
      description: Delete specializations by provided IDs
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Specialization IDs to delete
        in: body
        name: specialization_ids
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Specializations successfully deleted
        "400":
          description: Invalid body or jwt provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Delete Specializations
      tags:
      - Specializations
    get:
      consumes:
      - application/json
      description: Get specializations
      produces:
      - application/json
      responses:
        "200":
          description: Return specializations
          schema:
            items:
              $ref: '#/definitions/dto.Base'
            type: array
        "400":
          description: Invalid body or jwt provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Get Specializations
      tags:
      - Specializations
    post:
      consumes:
      - application/json
      description: Create a new specialization
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Specializations data to create
        in: body
        name: specialization
        required: true
        schema:
          $ref: '#/definitions/dto.BaseBase'
      produces:
      - application/json
      responses:
        "201":
          description: Specializations successfully created
          schema:
            $ref: '#/definitions/responses.CreatedIDResponse'
        "400":
          description: Invalid body or jwt provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Create Specialization
      tags:
      - Specializations
  /api/trainer:
    get:
      consumes:
      - application/json
      description: Get trainer covers with pagination
      parameters:
      - description: Search term
        in: query
        name: search
        type: string
      - description: Cursor for pagination
        in: query
        name: cursor
        type: integer
      - collectionFormat: csv
        description: Role IDs
        in: query
        items:
          type: integer
        name: role_ids
        type: array
      - collectionFormat: csv
        description: Specialization IDs
        in: query
        items:
          type: integer
        name: specialization_ids
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: List of trainer covers with pagination
          schema:
            $ref: '#/definitions/dto.TrainerCoverPagination'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Get Trainer Covers
      tags:
      - Trainers
  /api/trainer/{trainer_id}:
    get:
      consumes:
      - application/json
      description: Returned data for profile
      parameters:
      - description: Trainer ID
        in: path
        name: trainer_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Return trainer
          schema:
            $ref: '#/definitions/dto.Trainer'
        "400":
          description: Bad body or JWT provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal Server Error
      summary: Get Profile
      tags:
      - Trainers
  /api/trainer/achievement:
    post:
      consumes:
      - application/json
      description: Create a new achievement for the trainer
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Achievement data to create
        in: body
        name: achievement
        required: true
        schema:
          $ref: '#/definitions/dto.AchievementCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Achievement successfully created
          schema:
            $ref: '#/definitions/responses.CreatedIDResponse'
        "400":
          description: Invalid body or jwt provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Create Trainer's Achievement
      tags:
      - Trainers
  /api/trainer/achievement/{achievement_id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing achievement for the trainer
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Achievement ID
        in: path
        name: achievement_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Achievement successfully deleted
        "400":
          description: Invalid body or jwt provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Delete Trainer's Achievement
      tags:
      - Trainers
  /api/trainer/achievement/{achievement_id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of an existing achievement for the trainer
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Achievement ID
        in: path
        name: achievement_id
        required: true
        type: integer
      - description: Achievement status to update
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/dto.AchievementStatusUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Achievement status successfully updated
        "400":
          description: Invalid body or jwt provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Update Trainer's Achievement Status
      tags:
      - Trainers
  /api/trainer/main:
    put:
      consumes:
      - application/json
      description: Update trainer's main info by provided data
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Trainer data to set
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.TrainerUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Trainer successfully updated
        "400":
          description: Invalid body or jwt provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Update Trainer's Main Info
      tags:
      - Trainers
  /api/trainer/me:
    get:
      consumes:
      - application/json
      description: Get me
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Return trainer
          schema:
            $ref: '#/definitions/dto.Trainer'
        "400":
          description: Bad body or JWT provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal Server Error
      summary: Get Me
      tags:
      - Trainers
  /api/trainer/photo:
    put:
      consumes:
      - application/json
      description: Update trainer's photo
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: New user photo with type jpeg/jpg/png/svg under 2MB
        in: formData
        name: photo
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Trainer successfully updated
        "400":
          description: Invalid photo or jwt provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Update Trainer's Photo
      tags:
      - Trainers
  /api/trainer/roles:
    put:
      consumes:
      - application/json
      description: Update trainer's roles by provided data
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Role IDs to set
        in: body
        name: roles
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Roles successfully updated
        "400":
          description: Invalid body or jwt provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Update Trainer's Roles
      tags:
      - Trainers
  /api/trainer/service:
    post:
      consumes:
      - application/json
      description: Create a new service for the trainer
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Service data to create
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/dto.ServiceCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Service successfully created
          schema:
            $ref: '#/definitions/responses.CreatedIDResponse'
        "400":
          description: Invalid body or jwt provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Create Trainer's Service
      tags:
      - Trainers
    put:
      consumes:
      - application/json
      description: Update an existing service for the trainer
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Service data to update
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/dto.ServiceUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Service successfully updated
        "400":
          description: Invalid body or jwt provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Update Trainer's Service
      tags:
      - Trainers
  /api/trainer/service/{service_id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing service for the trainer
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Service ID
        in: path
        name: service_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Service successfully deleted
        "400":
          description: Invalid body or jwt provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Delete Trainer's Service
      tags:
      - Trainers
  /api/trainer/specializations:
    put:
      consumes:
      - application/json
      description: Update trainer's specializations by provided data
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Specialization IDs to set
        in: body
        name: specializations
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Specializations successfully updated
        "400":
          description: Invalid body or jwt provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Update Trainer's Specializations
      tags:
      - Trainers
  /api/training:
    get:
      consumes:
      - application/json
      description: Get training covers with optional search
      parameters:
      - description: Search term
        in: query
        name: search
        type: string
      - description: Cursor for pagination
        in: query
        name: cursor
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Return training covers
          schema:
            $ref: '#/definitions/dto.TrainingCoverPagination'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Get Training Covers
      tags:
      - Trainings
    post:
      consumes:
      - application/json
      description: Create a training for a user
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Training data to create
        in: body
        name: training
        required: true
        schema:
          $ref: '#/definitions/dto.TrainingCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Training successfully created
          schema:
            $ref: '#/definitions/responses.CreatedIDResponse'
        "400":
          description: Bad body or JWT provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Create Training
      tags:
      - Trainings
  /api/training/{training_id}:
    get:
      consumes:
      - application/json
      description: Get a training by ID
      parameters:
      - description: Training ID
        in: path
        name: training_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Return training
          schema:
            $ref: '#/definitions/dto.Training'
        "400":
          description: Invalid training ID
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "404":
          description: No training with such ID
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Get Training
      tags:
      - Trainings
  /api/training/{training_id}/exercise/{exercise_id}/status:
    patch:
      consumes:
      - application/json
      description: Set the status of an exercise in a training
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Training ID
        in: path
        name: training_id
        required: true
        type: integer
      - description: Exercise ID
        in: path
        name: exercise_id
        required: true
        type: integer
      - description: Exercise status to update
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/dto.ExerciseStatusUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Exercise status successfully updated
        "400":
          description: Bad body or JWT provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Set Exercise Status
      tags:
      - Trainings
  /api/training/base:
    post:
      consumes:
      - application/json
      description: Create a base training
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Training data to create
        in: body
        name: training
        required: true
        schema:
          $ref: '#/definitions/dto.TrainingCreateBase'
      produces:
      - application/json
      responses:
        "201":
          description: Training base successfully created
          schema:
            $ref: '#/definitions/responses.CreatedIDsResponse'
        "400":
          description: Bad body or JWT provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Create Training Base
      tags:
      - Trainings
  /api/training/date:
    get:
      consumes:
      - application/json
      description: Get trainings by user training IDs
      parameters:
      - collectionFormat: csv
        description: User Training IDs
        in: query
        items:
          type: integer
        name: user_training_ids
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Return trainings with dates
          schema:
            items:
              $ref: '#/definitions/dto.UserTraining'
            type: array
        "400":
          description: Invalid user training IDs
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "404":
          description: No schedule training with such ID
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Get Trainings Date
      tags:
      - Trainings
  /api/training/exercise:
    get:
      consumes:
      - application/json
      description: Get exercises with pagination using cursor
      parameters:
      - description: Cursor for pagination
        in: query
        name: cursor
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Return exercises with pagination
          schema:
            $ref: '#/definitions/dto.ExercisePagination'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Get Exercises with Pagination
      tags:
      - Trainings
    post:
      consumes:
      - application/json
      description: Create multiple exercises
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Exercises data to create
        in: body
        name: exercises
        required: true
        schema:
          items:
            $ref: '#/definitions/dto.ExerciseCreateBase'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Exercises successfully created
          schema:
            $ref: '#/definitions/responses.CreatedIDsResponse'
        "400":
          description: Bad body or JWT provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Create Exercises
      tags:
      - Trainings
  /api/training/schedule:
    get:
      consumes:
      - application/json
      description: Get schedule for the specified month
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Month (1-12)
        in: query
        name: month
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Return schedule for the month
          schema:
            items:
              $ref: '#/definitions/dto.Schedule'
            type: array
        "400":
          description: Bad month or JWT provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Get Schedule
      tags:
      - Trainings
    post:
      consumes:
      - application/json
      description: Schedule training
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Scheduled training data to create
        in: body
        name: training
        required: true
        schema:
          $ref: '#/definitions/dto.ScheduleTraining'
      produces:
      - application/json
      responses:
        "201":
          description: Scheduled training successfully created
          schema:
            $ref: '#/definitions/responses.CreatedIDResponse'
        "400":
          description: Bad body or JWT provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Schedule Training
      tags:
      - Trainings
  /api/training/schedule/{user_training_id}:
    delete:
      consumes:
      - application/json
      description: Delete a scheduled training for a specific date
      parameters:
      - description: User Training ID
        in: path
        name: user_training_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Scheduled training deleted successfully
        "400":
          description: Invalid user training ID
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Delete Scheduled Training
      tags:
      - Trainings
  /api/training/user:
    get:
      consumes:
      - application/json
      description: Get user training covers with optional search and user ID filter
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: Search term
        in: query
        name: search
        type: string
      - description: Cursor for pagination
        in: query
        name: cursor
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Return training covers
          schema:
            $ref: '#/definitions/dto.TrainingCoverPagination'
        "400":
          description: Bad query or JWT provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Get User Training Covers
      tags:
      - Trainings
  /api/training/user/{training_id}:
    delete:
      consumes:
      - application/json
      description: Delete a user training
      parameters:
      - description: Training ID
        in: path
        name: training_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Training deleted successfully
        "400":
          description: Invalid training ID
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Delete User Training
      tags:
      - Trainings
  /api/user:
    get:
      consumes:
      - application/json
      description: Get user covers with pagination
      parameters:
      - description: Search term
        in: query
        name: search
        type: string
      - description: Cursor for pagination
        in: query
        name: cursor
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of user covers with pagination
          schema:
            $ref: '#/definitions/dto.UserCoverPagination'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Get User Covers
      tags:
      - Users
  /api/user/{user_id}:
    get:
      consumes:
      - application/json
      description: Returned data for profile
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Return user
          schema:
            $ref: '#/definitions/dto.User'
        "400":
          description: Bad body provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal Server Error
      summary: Get Profile
      tags:
      - Users
  /api/user/main:
    put:
      consumes:
      - application/json
      description: Update user's main info by provided data
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: User data to set
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: User successfully updated
        "400":
          description: Invalid body or jwt provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Update User's Main Info
      tags:
      - Users
  /api/user/me:
    get:
      consumes:
      - application/json
      description: Get me
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Return user
          schema:
            $ref: '#/definitions/dto.User'
        "400":
          description: Bad body or JWT provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal Server Error
      summary: Get Me
      tags:
      - Users
  /api/user/photo:
    put:
      consumes:
      - application/json
      description: Update user's photo
      parameters:
      - description: Access token
        in: header
        name: access_token
        required: true
        type: string
      - description: New user photo with type jpeg/jpg/png/svg under 2MB
        in: formData
        name: photo
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: User successfully updated
        "400":
          description: Invalid photo or jwt provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is expired or invalid
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
      summary: Update User's Photo
      tags:
      - Users
swagger: "2.0"
